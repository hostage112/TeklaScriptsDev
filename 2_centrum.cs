// Generated by Tekla.Technology.Akit.ScriptBuilder
using Tekla.Structures;
using Tekla.Structures.Drawing;
using Tekla.Structures.Geometry3d;
using System.Windows.Forms;


namespace Tekla.Technology.Akit.UserScript
{
    public class Script
    {
        public static void Run(Tekla.Technology.Akit.IScript akit)
        {
            DrawingHandler MyDrawingHandler = new DrawingHandler();
            if (MyDrawingHandler.GetConnectionStatus())
            {
                MarkBase MyMarkBase;
                DrawingObjectEnumerator views = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllViews();
                while (views.MoveNext())
                {
                    DrawingObjectEnumerator allObjects = (views.Current as ViewBase).GetAllObjects();
                    while (allObjects.MoveNext())
                    {
                        if (allObjects.Current is MarkBase)
                        {
                            MyMarkBase = allObjects.Current as MarkBase;
                            DrawingObjectEnumerator gg = MyMarkBase.GetRelatedObjects();

                            while (gg.MoveNext())
                            {
                                ModelObject modelObject = (ModelObject)gg.Current;
                                MessageBox.Show(modelObject.ModelIdentifier.ToString());
                            }
                            //MyMarkBase.Attributes.Frame.Color = DrawingColors.Red;
                            //MyMarkBase.Attributes.Frame.Type = FrameTypes.Sharpened;
                            //MyMarkBase.Modify();
                        }
                    }
                }

                DrawingObjectEnumerator allParts = MyDrawingHandler.GetActiveDrawing().GetSheet().GetAllObjects(typeof(Part));
                while (allParts.MoveNext())
                {
                    ModelObject modelObject = (ModelObject)allParts.Current;
                    MessageBox.Show(modelObject.ModelIdentifier.ToString());
                }

            }
        }

    }
}
